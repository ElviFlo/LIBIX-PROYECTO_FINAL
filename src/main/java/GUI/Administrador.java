/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import ConexionBD.ConexionBD;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Elvira Florez
 */
public class Administrador extends javax.swing.JFrame {

    static CardLayout cardLayout;
    //Para hacer el Modelo de la tabla del horario
    DefaultTableModel ModeloTabla = new DefaultTableModel();

    String sx;

    public Administrador() {
        initComponents();
        setBackground(new Color(0, 0, 0, 0));
        bt_minimizar.setColor1Background(new Color(0, 0, 0, 0));
        bt_cerrar.setColor1Background(new Color(0, 0, 0, 0));
        cardLayout = (CardLayout) (CardLayout.getLayout());
        bt_f1.setVisible(false);
        bt_m1.setVisible(true);
        esconder.setVisible(false);
        esconder1.setVisible(false);
        cardLayout.show(CardLayout, "Inicio");

        CB_Orden.addItem("-");
        CB_Orden.addItem("Ascendente");
        CB_Orden.addItem("Descendente");

        CB_Servicio.addItem("-");

        MostrarServicios();
        MostraDoctores();

        LlenarTodosDatos("Todas", "", "", "");
        
        BT_Home.setColor1Background(new Color(82, 132, 192));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        botones = new javax.swing.ButtonGroup();
        Background = new Componentes.BlurBackground();
        JP_BarraLateral = new org.example.Custom.PanelRound();
        JP_CerraSesionBarraL = new javax.swing.JPanel();
        BT_CerrarSesion = new Componentes.AllButton();
        BT_Menu = new Componentes.AllButton();
        BT_Home = new Componentes.AllButton();
        BT_Datos = new Componentes.AllButton();
        CardLayout = new javax.swing.JPanel();
        Datos = new javax.swing.JPanel();
        blurBackground3 = new Componentes.BlurBackground();
        NombreApellido1 = new org.example.Custom.PanelRound();
        Update_name = new org.example.Custom.AnimatedTextField();
        Telefono1 = new org.example.Custom.PanelRound();
        Update_phone = new org.example.Custom.AnimatedTextField();
        Edad1 = new org.example.Custom.PanelRound();
        update_age = new org.example.Custom.AnimatedTextField();
        Usuario1 = new org.example.Custom.PanelRound();
        update_user = new org.example.Custom.AnimatedTextField();
        NoDocumento1 = new org.example.Custom.PanelRound();
        update_id = new org.example.Custom.AnimatedTextField();
        Contrase√±a1 = new org.example.Custom.PanelRound();
        ver = new javax.swing.JLabel();
        esconder = new javax.swing.JLabel();
        Update_password = new org.example.Custom.AnimatedPasswordField();
        ConfirmarContr1 = new org.example.Custom.PanelRound();
        ver1 = new javax.swing.JLabel();
        esconder1 = new javax.swing.JLabel();
        update_confirm = new org.example.Custom.AnimatedPasswordField();
        BT_Actualizar = new Componentes.AllButton();
        bt_f1 = new javax.swing.JLabel();
        bt_m1 = new javax.swing.JLabel();
        barra_superior1 = new javax.swing.JPanel();
        bt_cerrar1 = new Componentes.AllButton();
        bt_minimizar1 = new Componentes.AllButton();
        Inicio = new javax.swing.JPanel();
        blurBackground8 = new Componentes.BlurBackground();
        barra_superior = new javax.swing.JPanel();
        bt_cerrar = new Componentes.AllButton();
        bt_minimizar = new Componentes.AllButton();
        panelRound1 = new org.example.Custom.PanelRound();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tabla = new Componentes.Table();
        jLabel1 = new javax.swing.JLabel();
        BT_CambiarEstado = new Componentes.AllButton();
        lb_Estado = new javax.swing.JLabel();
        panelRound2 = new org.example.Custom.PanelRound();
        icon_do = new Componentes.BlurBackground();
        lb_doctor = new javax.swing.JLabel();
        nu_do = new javax.swing.JLabel();
        label_total = new javax.swing.JLabel();
        panelRound3 = new org.example.Custom.PanelRound();
        blurBackground11 = new Componentes.BlurBackground();
        icon_ad = new javax.swing.JLabel();
        nu_ad = new javax.swing.JLabel();
        label_completadas = new javax.swing.JLabel();
        panelRound4 = new org.example.Custom.PanelRound();
        blurBackground12 = new Componentes.BlurBackground();
        icon_em = new javax.swing.JLabel();
        label_pendiente = new javax.swing.JLabel();
        nu_em = new javax.swing.JLabel();
        CB_Doctor = new Componentes.ComboBoxSuggestion();
        CB_EstadoCita = new Componentes.ComboBoxSuggestion();
        CB_Orden = new Componentes.ComboBoxSuggestion();
        CB_Servicio = new Componentes.ComboBoxSuggestion();
        BT_Filtrar = new Componentes.AllButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(1010, 548));
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Background.setBackground(new java.awt.Color(255, 255, 255));
        Background.setRadius(40);
        Background.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        JP_BarraLateral.setBackground(new java.awt.Color(122, 173, 252));
        JP_BarraLateral.setEnableCustomRectangle(true);
        JP_BarraLateral.setRoundBottomLeft(40);
        JP_BarraLateral.setRoundBottomRight(1);
        JP_BarraLateral.setRoundTopLeft(40);
        JP_BarraLateral.setRoundTopRight(1);
        JP_BarraLateral.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        JP_CerraSesionBarraL.setBackground(new java.awt.Color(122, 173, 252));
        JP_CerraSesionBarraL.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        BT_CerrarSesion.setBackground(new java.awt.Color(122, 173, 252));
        BT_CerrarSesion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cerrar-sesion.png"))); // NOI18N
        BT_CerrarSesion.setColor1Background(new java.awt.Color(122, 173, 252));
        BT_CerrarSesion.setColor2Over(new java.awt.Color(82, 132, 192));
        BT_CerrarSesion.setColor3Click(new java.awt.Color(74, 93, 242));
        BT_CerrarSesion.setEnableColorGradient(true);
        BT_CerrarSesion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BT_CerrarSesionMouseClicked(evt);
            }
        });
        JP_CerraSesionBarraL.add(BT_CerrarSesion, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 50, 40));

        JP_BarraLateral.add(JP_CerraSesionBarraL, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 490, 70, 60));

        BT_Menu.setBackground(new java.awt.Color(122, 173, 252));
        BT_Menu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/menu.png"))); // NOI18N
        BT_Menu.setColor1Background(new java.awt.Color(122, 173, 252));
        BT_Menu.setColor2Over(new java.awt.Color(82, 132, 192));
        BT_Menu.setColor3Click(new java.awt.Color(74, 93, 242));
        BT_Menu.setEnableColorGradient(true);
        BT_Menu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BT_MenuMouseClicked(evt);
            }
        });
        JP_BarraLateral.add(BT_Menu, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 50, 40));

        BT_Home.setBackground(new java.awt.Color(122, 173, 252));
        BT_Home.setIcon(new javax.swing.ImageIcon(getClass().getResource("/house.png"))); // NOI18N
        BT_Home.setColor1Background(new java.awt.Color(122, 173, 252));
        BT_Home.setColor2Over(new java.awt.Color(82, 132, 192));
        BT_Home.setColor3Click(new java.awt.Color(74, 93, 242));
        BT_Home.setEnableColorGradient(true);
        BT_Home.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BT_HomeMouseClicked(evt);
            }
        });
        JP_BarraLateral.add(BT_Home, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, 50, 40));

        BT_Datos.setBackground(new java.awt.Color(122, 173, 252));
        BT_Datos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/registro.png"))); // NOI18N
        BT_Datos.setColor1Background(new java.awt.Color(122, 173, 252));
        BT_Datos.setColor2Over(new java.awt.Color(82, 132, 192));
        BT_Datos.setColor3Click(new java.awt.Color(74, 93, 242));
        BT_Datos.setEnableColorGradient(true);
        BT_Datos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BT_DatosMouseClicked(evt);
            }
        });
        JP_BarraLateral.add(BT_Datos, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 320, 50, 40));

        Background.add(JP_BarraLateral, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 70, 570));

        CardLayout.setBackground(new java.awt.Color(255, 255, 255));
        CardLayout.setForeground(new java.awt.Color(204, 255, 255));
        CardLayout.setLayout(new java.awt.CardLayout());

        Datos.setBackground(new java.awt.Color(255, 255, 255));

        blurBackground3.setEnableCustomRectangle(true);
        blurBackground3.setImage(new javax.swing.ImageIcon(getClass().getResource("/Crear Admi.png"))); // NOI18N
        blurBackground3.setRadius(1);
        blurBackground3.setRoundBottomLeft(1);
        blurBackground3.setRoundBottomRight(40);
        blurBackground3.setRoundTopLeft(1);
        blurBackground3.setRoundTopRight(40);
        blurBackground3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        NombreApellido1.setRadius(20);
        NombreApellido1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Update_name.setForeground(new java.awt.Color(0, 0, 0));
        Update_name.setFont(new java.awt.Font("Century", 0, 17)); // NOI18N
        Update_name.setHint("Ej: Rodolfo Rivera");
        Update_name.setHintColor(new java.awt.Color(153, 153, 153));
        Update_name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Update_nameKeyTyped(evt);
            }
        });
        NombreApellido1.add(Update_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 0, 340, 45));

        blurBackground3.add(NombreApellido1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 140, 370, 45));

        Telefono1.setRadius(20);
        Telefono1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Update_phone.setForeground(new java.awt.Color(0, 0, 0));
        Update_phone.setFont(new java.awt.Font("Century", 0, 17)); // NOI18N
        Update_phone.setHint("Ej: 3166705696");
        Update_phone.setHintColor(new java.awt.Color(153, 153, 153));
        Update_phone.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Update_phoneKeyTyped(evt);
            }
        });
        Telefono1.add(Update_phone, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 0, 340, 45));

        blurBackground3.add(Telefono1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 255, 370, 45));

        Edad1.setRadius(20);
        Edad1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        update_age.setForeground(new java.awt.Color(0, 0, 0));
        update_age.setFont(new java.awt.Font("Century", 0, 17)); // NOI18N
        update_age.setHint("Ej: 16");
        update_age.setHintColor(new java.awt.Color(153, 153, 153));
        update_age.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                update_ageKeyTyped(evt);
            }
        });
        Edad1.add(update_age, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 0, 190, 45));

        blurBackground3.add(Edad1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 360, 220, 45));

        Usuario1.setRadius(20);
        Usuario1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        update_user.setForeground(new java.awt.Color(0, 0, 0));
        update_user.setFont(new java.awt.Font("Century", 0, 17)); // NOI18N
        update_user.setHint("Ej: Rodor");
        update_user.setHintColor(new java.awt.Color(153, 153, 153));
        update_user.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                update_userKeyTyped(evt);
            }
        });
        Usuario1.add(update_user, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 0, 340, 45));

        blurBackground3.add(Usuario1, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 140, 370, 45));

        NoDocumento1.setRadius(20);
        NoDocumento1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        update_id.setForeground(new java.awt.Color(0, 0, 0));
        update_id.setFont(new java.awt.Font("Century", 0, 17)); // NOI18N
        update_id.setHint("Ej: 32692328");
        update_id.setHintColor(new java.awt.Color(153, 153, 153));
        update_id.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                update_idKeyTyped(evt);
            }
        });
        NoDocumento1.add(update_id, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 0, 340, 45));

        blurBackground3.add(NoDocumento1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 470, 370, 45));

        Contrase√±a1.setRadius(20);
        Contrase√±a1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ver.png"))); // NOI18N
        ver.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                verMouseClicked(evt);
            }
        });
        Contrase√±a1.add(ver, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 0, 40, 40));

        esconder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/esconder.png"))); // NOI18N
        esconder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                esconderMouseClicked(evt);
            }
        });
        Contrase√±a1.add(esconder, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 0, 40, 40));

        Update_password.setForeground(new java.awt.Color(0, 0, 0));
        Update_password.setDisabledTextColor(new java.awt.Color(153, 153, 153));
        Update_password.setFont(new java.awt.Font("Century", 0, 17)); // NOI18N
        Update_password.setHint("Escriba una contrase√±a");
        Update_password.setHintColor(new java.awt.Color(153, 153, 153));
        Update_password.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Update_passwordKeyTyped(evt);
            }
        });
        Contrase√±a1.add(Update_password, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 330, 45));

        blurBackground3.add(Contrase√±a1, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 255, 370, 45));

        ConfirmarContr1.setRadius(20);
        ConfirmarContr1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ver1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ver.png"))); // NOI18N
        ver1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ver1MouseClicked(evt);
            }
        });
        ConfirmarContr1.add(ver1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 0, 40, 40));

        esconder1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/esconder.png"))); // NOI18N
        esconder1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                esconder1MouseClicked(evt);
            }
        });
        ConfirmarContr1.add(esconder1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 0, 40, 40));

        update_confirm.setForeground(new java.awt.Color(0, 0, 0));
        update_confirm.setFont(new java.awt.Font("Century", 0, 17)); // NOI18N
        update_confirm.setHint("Repita la contrase√±a");
        update_confirm.setHintColor(new java.awt.Color(153, 153, 153));
        update_confirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update_confirmActionPerformed(evt);
            }
        });
        update_confirm.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                update_confirmKeyTyped(evt);
            }
        });
        ConfirmarContr1.add(update_confirm, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 330, 45));

        blurBackground3.add(ConfirmarContr1, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 360, 370, 45));

        BT_Actualizar.setText("Actualizar");
        BT_Actualizar.setChangeCoefficient(20);
        BT_Actualizar.setColor1Background(new java.awt.Color(82, 132, 192));
        BT_Actualizar.setColor1Foreground(new java.awt.Color(255, 255, 255));
        BT_Actualizar.setColor2Over(new java.awt.Color(40, 76, 118));
        BT_Actualizar.setColor2OverForeground(new java.awt.Color(255, 255, 255));
        BT_Actualizar.setColor3Click(new java.awt.Color(102, 153, 255));
        BT_Actualizar.setColor3ClickForeground(new java.awt.Color(255, 255, 255));
        BT_Actualizar.setEnableColorGradient(true);
        BT_Actualizar.setEnableShadow(true);
        BT_Actualizar.setFont(new java.awt.Font("Century", 1, 15)); // NOI18N
        BT_Actualizar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BT_Actualizar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BT_ActualizarMouseClicked(evt);
            }
        });
        BT_Actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BT_ActualizarActionPerformed(evt);
            }
        });
        blurBackground3.add(BT_Actualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 460, 240, 38));

        bt_f1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/F.png"))); // NOI18N
        blurBackground3.add(bt_f1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 360, 80, 50));

        bt_m1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/M.png"))); // NOI18N
        blurBackground3.add(bt_m1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 360, 80, 50));

        barra_superior1.setOpaque(false);
        barra_superior1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                barra_superior1MouseDragged(evt);
            }
        });
        barra_superior1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                barra_superior1MousePressed(evt);
            }
        });
        barra_superior1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bt_cerrar1.setText("X");
        bt_cerrar1.setChangeCoefficient(15);
        bt_cerrar1.setColor1Background(new java.awt.Color(172, 206, 252));
        bt_cerrar1.setColor2Over(new java.awt.Color(102, 153, 255));
        bt_cerrar1.setColor3Click(new java.awt.Color(0, 102, 255));
        bt_cerrar1.setEnableColorGradient(true);
        bt_cerrar1.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        bt_cerrar1.setRoundBottomLeft(0);
        bt_cerrar1.setRoundBottomRight(0);
        bt_cerrar1.setRoundTopLeft(0);
        bt_cerrar1.setRoundTopRight(15);
        bt_cerrar1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_cerrar1MouseClicked(evt);
            }
        });
        barra_superior1.add(bt_cerrar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(949, 0, 50, 22));

        bt_minimizar1.setText("-");
        bt_minimizar1.setChangeCoefficient(15);
        bt_minimizar1.setColor1Background(new java.awt.Color(172, 206, 252));
        bt_minimizar1.setColor2Over(new java.awt.Color(102, 153, 255));
        bt_minimizar1.setColor3Click(new java.awt.Color(0, 102, 255));
        bt_minimizar1.setEnableColorGradient(true);
        bt_minimizar1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        bt_minimizar1.setRoundBottomLeft(15);
        bt_minimizar1.setRoundBottomRight(0);
        bt_minimizar1.setRoundTopLeft(0);
        bt_minimizar1.setRoundTopRight(0);
        bt_minimizar1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_minimizar1MouseClicked(evt);
            }
        });
        barra_superior1.add(bt_minimizar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(899, 0, 50, 22));

        blurBackground3.add(barra_superior1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1000, 30));

        javax.swing.GroupLayout DatosLayout = new javax.swing.GroupLayout(Datos);
        Datos.setLayout(DatosLayout);
        DatosLayout.setHorizontalGroup(
            DatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DatosLayout.createSequentialGroup()
                .addComponent(blurBackground3, javax.swing.GroupLayout.PREFERRED_SIZE, 1010, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        DatosLayout.setVerticalGroup(
            DatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DatosLayout.createSequentialGroup()
                .addComponent(blurBackground3, javax.swing.GroupLayout.PREFERRED_SIZE, 572, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 28, Short.MAX_VALUE))
        );

        CardLayout.add(Datos, "Datos");

        Inicio.setBackground(new java.awt.Color(255, 255, 255));

        blurBackground8.setEnableCustomRectangle(true);
        blurBackground8.setImage(new javax.swing.ImageIcon(getClass().getResource("/Todos empleados.png"))); // NOI18N
        blurBackground8.setRadius(1);
        blurBackground8.setRoundBottomLeft(1);
        blurBackground8.setRoundBottomRight(40);
        blurBackground8.setRoundTopLeft(1);
        blurBackground8.setRoundTopRight(40);
        blurBackground8.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        barra_superior.setOpaque(false);
        barra_superior.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                barra_superiorMouseDragged(evt);
            }
        });
        barra_superior.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                barra_superiorMousePressed(evt);
            }
        });
        barra_superior.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bt_cerrar.setText("X");
        bt_cerrar.setChangeCoefficient(15);
        bt_cerrar.setColor1Background(new java.awt.Color(172, 206, 252));
        bt_cerrar.setColor2Over(new java.awt.Color(102, 153, 255));
        bt_cerrar.setColor3Click(new java.awt.Color(0, 102, 255));
        bt_cerrar.setEnableColorGradient(true);
        bt_cerrar.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        bt_cerrar.setRoundBottomLeft(0);
        bt_cerrar.setRoundBottomRight(0);
        bt_cerrar.setRoundTopLeft(0);
        bt_cerrar.setRoundTopRight(15);
        bt_cerrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_cerrarMouseClicked(evt);
            }
        });
        bt_cerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_cerrarActionPerformed(evt);
            }
        });
        barra_superior.add(bt_cerrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(955, 0, 50, 22));

        bt_minimizar.setText("-");
        bt_minimizar.setChangeCoefficient(15);
        bt_minimizar.setColor1Background(new java.awt.Color(172, 206, 252));
        bt_minimizar.setColor2Over(new java.awt.Color(102, 153, 255));
        bt_minimizar.setColor3Click(new java.awt.Color(0, 102, 255));
        bt_minimizar.setEnableColorGradient(true);
        bt_minimizar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        bt_minimizar.setRoundBottomLeft(15);
        bt_minimizar.setRoundBottomRight(0);
        bt_minimizar.setRoundTopLeft(0);
        bt_minimizar.setRoundTopRight(0);
        bt_minimizar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_minimizarMouseClicked(evt);
            }
        });
        barra_superior.add(bt_minimizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(905, 0, 50, 22));

        blurBackground8.add(barra_superior, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1010, 30));

        panelRound1.setBackground(new java.awt.Color(248, 247, 247));
        panelRound1.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        panelRound1.setRadius(10);
        panelRound1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Usuario", "Servicio", "Doctor", "Fecha", "Hora", "Confirmada", "Estado", "Telefono"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Tabla.setGridColor(new java.awt.Color(242, 242, 242));
        Tabla.setSelectionBackground(new java.awt.Color(204, 204, 204));
        jScrollPane1.setViewportView(Tabla);

        panelRound1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 829, 210));

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(127, 127, 127));
        jLabel1.setText("Lista de Citas:");
        panelRound1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 6, -1, -1));

        BT_CambiarEstado.setBorder(null);
        BT_CambiarEstado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/intercambiar.png"))); // NOI18N
        BT_CambiarEstado.setColor1Background(new java.awt.Color(255, 255, 254));
        BT_CambiarEstado.setColor2Over(new java.awt.Color(176, 207, 240));
        BT_CambiarEstado.setColor3Click(new java.awt.Color(163, 176, 212));
        BT_CambiarEstado.setEnableColorGradient(true);
        BT_CambiarEstado.setEnableShadow(true);
        BT_CambiarEstado.setRadius(32);
        BT_CambiarEstado.setRippleColor(new java.awt.Color(255, 255, 255));
        BT_CambiarEstado.setRoundBottomLeft(10);
        BT_CambiarEstado.setRoundBottomRight(10);
        BT_CambiarEstado.setRoundTopLeft(10);
        BT_CambiarEstado.setRoundTopRight(10);
        BT_CambiarEstado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BT_CambiarEstadoMouseClicked(evt);
            }
        });
        BT_CambiarEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BT_CambiarEstadoActionPerformed(evt);
            }
        });
        panelRound1.add(BT_CambiarEstado, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 2, 45, 40));

        lb_Estado.setFont(new java.awt.Font("SansSerif", 1, 15)); // NOI18N
        lb_Estado.setForeground(new java.awt.Color(127, 127, 127));
        lb_Estado.setText("Cambiar Estado");
        panelRound1.add(lb_Estado, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 9, -1, -1));
        lb_Estado.getAccessibleContext().setAccessibleName("Cambiar Estado");

        blurBackground8.add(panelRound1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 260, 870, 260));

        panelRound2.setBackground(new java.awt.Color(163, 193, 225));
        panelRound2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        icon_do.setImage(new javax.swing.ImageIcon(getClass().getResource("/todos.png"))); // NOI18N
        panelRound2.add(icon_do, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 12, 45, 45));

        lb_doctor.setFont(new java.awt.Font("SansSerif", 1, 20)); // NOI18N
        lb_doctor.setText("Total de Citas");
        panelRound2.add(lb_doctor, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 24, -1, -1));

        nu_do.setFont(new java.awt.Font("SansSerif", 1, 17)); // NOI18N
        nu_do.setForeground(new java.awt.Color(127, 127, 127));
        nu_do.setText("N√∫mero: ");
        panelRound2.add(nu_do, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, -1, -1));

        label_total.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        label_total.setForeground(new java.awt.Color(127, 127, 127));
        panelRound2.add(label_total, new org.netbeans.lib.awtextra.AbsoluteConstraints(124, 72, 110, 20));

        blurBackground8.add(panelRound2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 40, 290, 110));

        panelRound3.setBackground(new java.awt.Color(176, 207, 240));
        panelRound3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        blurBackground11.setImage(new javax.swing.ImageIcon(getClass().getResource("/cargando.png"))); // NOI18N
        panelRound3.add(blurBackground11, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 12, 42, 42));

        icon_ad.setFont(new java.awt.Font("SansSerif", 1, 20)); // NOI18N
        icon_ad.setText("Citas Completadas");
        panelRound3.add(icon_ad, new org.netbeans.lib.awtextra.AbsoluteConstraints(72, 24, -1, -1));

        nu_ad.setFont(new java.awt.Font("SansSerif", 1, 17)); // NOI18N
        nu_ad.setForeground(new java.awt.Color(127, 127, 127));
        nu_ad.setText("N√∫mero: ");
        panelRound3.add(nu_ad, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, -1, -1));

        label_completadas.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        label_completadas.setForeground(new java.awt.Color(127, 127, 127));
        panelRound3.add(label_completadas, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 72, 110, 20));

        blurBackground8.add(panelRound3, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 40, 270, 110));

        panelRound4.setBackground(new java.awt.Color(163, 193, 225));
        panelRound4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        blurBackground12.setImage(new javax.swing.ImageIcon(getClass().getResource("/reloj.png"))); // NOI18N
        panelRound4.add(blurBackground12, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 12, 45, 45));

        icon_em.setFont(new java.awt.Font("SansSerif", 1, 20)); // NOI18N
        icon_em.setText("Citas Pendientes");
        panelRound4.add(icon_em, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 24, -1, -1));

        label_pendiente.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        label_pendiente.setForeground(new java.awt.Color(127, 127, 127));
        panelRound4.add(label_pendiente, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 72, 110, 20));

        nu_em.setFont(new java.awt.Font("SansSerif", 1, 17)); // NOI18N
        nu_em.setForeground(new java.awt.Color(127, 127, 127));
        nu_em.setText("N√∫mero: ");
        panelRound4.add(nu_em, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, -1, -1));

        blurBackground8.add(panelRound4, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 40, 270, 110));

        CB_Doctor.setBackground(new java.awt.Color(248, 247, 247));
        CB_Doctor.setFont(new java.awt.Font("Century", 0, 14)); // NOI18N
        CB_Doctor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CB_DoctorItemStateChanged(evt);
            }
        });
        blurBackground8.add(CB_Doctor, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 200, -1, -1));

        CB_EstadoCita.setBackground(new java.awt.Color(248, 247, 247));
        CB_EstadoCita.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todas", "En Espera", "Valida", "Cancelada" }));
        CB_EstadoCita.setFont(new java.awt.Font("Century", 0, 14)); // NOI18N
        blurBackground8.add(CB_EstadoCita, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 200, -1, -1));

        CB_Orden.setBackground(new java.awt.Color(248, 247, 247));
        CB_Orden.setFont(new java.awt.Font("Century", 0, 14)); // NOI18N
        blurBackground8.add(CB_Orden, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 200, -1, -1));

        CB_Servicio.setBackground(new java.awt.Color(248, 247, 247));
        CB_Servicio.setFont(new java.awt.Font("Century", 0, 14)); // NOI18N
        CB_Servicio.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CB_ServicioItemStateChanged(evt);
            }
        });
        blurBackground8.add(CB_Servicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 200, -1, -1));

        BT_Filtrar.setBorder(null);
        BT_Filtrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/filtrar.png"))); // NOI18N
        BT_Filtrar.setColor1Background(new java.awt.Color(255, 255, 254));
        BT_Filtrar.setColor2Over(new java.awt.Color(176, 207, 240));
        BT_Filtrar.setColor3Click(new java.awt.Color(163, 176, 212));
        BT_Filtrar.setEnableColorGradient(true);
        BT_Filtrar.setEnableShadow(true);
        BT_Filtrar.setRadius(32);
        BT_Filtrar.setRippleColor(new java.awt.Color(255, 255, 255));
        BT_Filtrar.setRoundBottomLeft(10);
        BT_Filtrar.setRoundBottomRight(10);
        BT_Filtrar.setRoundTopLeft(10);
        BT_Filtrar.setRoundTopRight(10);
        BT_Filtrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BT_FiltrarMouseClicked(evt);
            }
        });
        BT_Filtrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BT_FiltrarActionPerformed(evt);
            }
        });
        blurBackground8.add(BT_Filtrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(854, 198, 48, 46));

        javax.swing.GroupLayout InicioLayout = new javax.swing.GroupLayout(Inicio);
        Inicio.setLayout(InicioLayout);
        InicioLayout.setHorizontalGroup(
            InicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InicioLayout.createSequentialGroup()
                .addComponent(blurBackground8, javax.swing.GroupLayout.PREFERRED_SIZE, 1004, Short.MAX_VALUE)
                .addContainerGap())
        );
        InicioLayout.setVerticalGroup(
            InicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InicioLayout.createSequentialGroup()
                .addComponent(blurBackground8, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 30, Short.MAX_VALUE))
        );

        CardLayout.add(Inicio, "Inicio");
        Inicio.getAccessibleContext().setAccessibleName("");

        Background.add(CardLayout, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 0, 1010, 600));

        getContentPane().add(Background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1080, 570));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    int mouseX, mouseY;

    private void BT_HomeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BT_HomeMouseClicked
        cardLayout.show(CardLayout, "Inicio");
        ActualizarTabla();
        BT_Home.setColor1Background(new Color(82, 132, 192));
        BT_Datos.setColor1Background(new Color(122, 173, 252));
    }//GEN-LAST:event_BT_HomeMouseClicked

    private void BT_DatosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BT_DatosMouseClicked
        cardLayout.show(CardLayout, "Datos");
        BT_Home.setColor1Background(new Color(122, 173, 252));
        BT_Datos.setColor1Background(new Color(82, 132, 192));
        update_user.setText(extraer()[4]);
        Update_name.setText(extraer()[0]);
        Update_phone.setText(extraer()[1]);
        update_age.setText(extraer()[2]);
        Update_password.setText(extraer()[5]);
        update_confirm.setText(extraer()[5]);
        update_id.setText(extraer()[3]);
                String generoact = extraer()[6];
        if (generoact.equals("Masculino")) {
            bt_m1.setVisible(true);
            bt_f1.setVisible(false);
            sx = "M";
        } else {
            if (generoact.equals("Femenino")) {
                bt_m1.setVisible(false);
                bt_f1.setVisible(true);
                sx = "F";
            }
        }
    }//GEN-LAST:event_BT_DatosMouseClicked

    private void BT_MenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BT_MenuMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_BT_MenuMouseClicked

    private void BT_CerrarSesionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BT_CerrarSesionMouseClicked
        Login lg = new Login();
        lg.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_BT_CerrarSesionMouseClicked

    // <editor-fold defaultstate="collapsed" desc="Panel Actualizar datos">

    private void Update_nameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Update_nameKeyTyped
        //Para que el TX acepte solo letras
        int key = evt.getKeyChar();
        boolean Mayusculas = key >= 65 && key <= 90;
        boolean Minusculas = key >= 97 && key <= 122;
        boolean Espacio = key == 32;
        if (!(Minusculas || Mayusculas || Espacio)) {
            evt.consume();
        }

        //Establecer limite de caracteres
        if (Update_name.getText().length() >= 20) {
            evt.consume();
        }
    }//GEN-LAST:event_Update_nameKeyTyped

    private void Update_phoneKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Update_phoneKeyTyped
        //Para que el TX acepte solo numeros
        int key = evt.getKeyChar();
        boolean Numeros = key >= 48 && key <= 57;
        if (!(Numeros)) {
            evt.consume();
        }
        //Establecer limite de caracteres
        if (Update_phone.getText().length() >= 10) {
            evt.consume();
        }
    }//GEN-LAST:event_Update_phoneKeyTyped

    private void update_ageKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_update_ageKeyTyped
        //Para que el TX acepte solo numeros
        int key = evt.getKeyChar();
        boolean Numeros = key >= 48 && key <= 57;
        if (!(Numeros)) {
            evt.consume();
        }
        //Establecer limite de caracteres
        if (update_age.getText().length() >= 3) {
            evt.consume();
        }
    }//GEN-LAST:event_update_ageKeyTyped

    private void update_userKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_update_userKeyTyped
        //Para que el TX acepte solo letras
        int key = evt.getKeyChar();
        boolean Mayusculas = key >= 65 && key <= 90;
        boolean Minusculas = key >= 97 && key <= 122;
        if (!(Minusculas || Mayusculas)) {
            evt.consume();
        }
        //Establecer limite de caracteres
        if (update_user.getText().length() >= 20) {
            evt.consume();
        }
    }//GEN-LAST:event_update_userKeyTyped

    private void update_idKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_update_idKeyTyped
        //Para que el TX acepte solo numeros
        int key = evt.getKeyChar();
        boolean Numeros = key >= 48 && key <= 57;
        if (!(Numeros)) {
            evt.consume();
        }
        //Establecer limite de caracteres
        if (update_id.getText().length() >= 10) {
            evt.consume();
        }
    }//GEN-LAST:event_update_idKeyTyped

    private void verMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_verMouseClicked
        esconder.setVisible(true);
        ver.setVisible(false);
        Update_password.setEchoChar((char) 0);
    }//GEN-LAST:event_verMouseClicked

    private void esconderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_esconderMouseClicked
        esconder.setVisible(false);
        ver.setVisible(true);
        Update_password.setEchoChar('*');
    }//GEN-LAST:event_esconderMouseClicked

    private void Update_passwordKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Update_passwordKeyTyped
        //Para que el TX acepte solo letras
        int key = evt.getKeyChar();
        boolean Mayusculas = key >= 65 && key <= 90;
        boolean Minusculas = key >= 97 && key <= 122;
        boolean Numeros = key >= 48 && key <= 57;
        if (!(Minusculas || Mayusculas || Numeros)) {
            evt.consume();
        }
        //Establecer limite de caracteres
        if (Update_password.getText().length() >= 20) {
            evt.consume();
        }
    }//GEN-LAST:event_Update_passwordKeyTyped

    private void ver1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ver1MouseClicked
        esconder1.setVisible(true);
        ver1.setVisible(false);
        update_confirm.setEchoChar((char) 0);
    }//GEN-LAST:event_ver1MouseClicked

    private void esconder1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_esconder1MouseClicked
        esconder1.setVisible(false);
        ver1.setVisible(true);
        update_confirm.setEchoChar('*');
    }//GEN-LAST:event_esconder1MouseClicked

    private void update_confirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_update_confirmActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_update_confirmActionPerformed

    private void update_confirmKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_update_confirmKeyTyped
        //Para que el TX acepte solo letras
        int key = evt.getKeyChar();
        boolean Mayusculas = key >= 65 && key <= 90;
        boolean Minusculas = key >= 97 && key <= 122;
        boolean Numeros = key >= 48 && key <= 57;
        if (!(Minusculas || Mayusculas || Numeros)) {
            evt.consume();
        }
        //Establecer limite de caracteres
        if (update_confirm.getText().length() >= 20) {
            evt.consume();
        }
    }//GEN-LAST:event_update_confirmKeyTyped

    private void bt_cerrar1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_cerrar1MouseClicked
        System.exit(0);
    }//GEN-LAST:event_bt_cerrar1MouseClicked

    private void bt_minimizar1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_minimizar1MouseClicked
        this.setState(ICONIFIED);
    }//GEN-LAST:event_bt_minimizar1MouseClicked

    private void barra_superior1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_barra_superior1MouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        this.setLocation(x - mouseX, y - mouseY);
    }//GEN-LAST:event_barra_superior1MouseDragged

    private void barra_superior1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_barra_superior1MousePressed
        mouseX = evt.getX();
        mouseY = evt.getY();
    }//GEN-LAST:event_barra_superior1MousePressed

    private void BT_ActualizarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BT_ActualizarMouseClicked
        // <editor-fold defaultstate="collapsed" desc="Validaciones de datos">
        if (Update_name.getText().isEmpty()) {
            new Warning("Falta ingresar el Nombre").setVisible(true);
        } else if (!"F".equals(sx) && !"M".equals(sx)) {
            new Warning("Falta seleccionar el Genero").setVisible(true);
        } else if (update_id.getText().isEmpty()) {
            new Warning("Falta ingresar el Documento").setVisible(true);
        } else if (update_age.getText().isEmpty()) {
            new Warning("Falta ingresar la Edad").setVisible(true);
        } else if (Update_phone.getText().isEmpty()) {
            new Warning("Falta ingresar el Telefono").setVisible(true);
        } else if (update_user.getText().isEmpty()) {
            new Warning("Falta ingresar el Usuario").setVisible(true);
        } else if (Update_password.getText().isEmpty()) {
            new Warning("Falta ingresar el Contrase√±a").setVisible(true);
        } else if (update_confirm.getText().isEmpty()) {
            new Warning("Falta confirmar la Contrase√±a").setVisible(true);
        } else if (!update_confirm.getText().equals(Update_password.getText())) {
            new Warning("Las contrase√±as no coinciden").setVisible(true);
        } else {
            // </editor-fold>
            //Valida los tama√±os minimo de cada TX
            if (Tama√±oMinimo(Update_name, "Nombre y Apellido", 5)
                    && Tama√±oTelefono(Update_phone) == true
                    && Tama√±oMinimo(update_age, "Edad", 1)
                    && Tama√±oMinimo(update_id, "No. Documento", 7)
                    && Tama√±oMinimo(update_user, "Usuario", 4)
                    && Tama√±oMinimo(Update_password, "Contrase√±a", 4)) {
                if (Existencia() == true) {
                    new Warning("Las datos igresados ya existen").setVisible(true);
                } else {
                    eliminar_act();
                    ActualizarBD();
                    Login JF_Login = new Login();
                    this.setVisible(false);
                    JF_Login.setVisible(true);

                }
            }

        }
    }//GEN-LAST:event_BT_ActualizarMouseClicked

    // </editor-fold>

    private void BT_ActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BT_ActualizarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BT_ActualizarActionPerformed

    private void bt_cerrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_cerrarMouseClicked
        System.exit(0);
    }//GEN-LAST:event_bt_cerrarMouseClicked

    private void bt_cerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_cerrarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bt_cerrarActionPerformed

    private void bt_minimizarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_minimizarMouseClicked
        this.setState(ICONIFIED);
    }//GEN-LAST:event_bt_minimizarMouseClicked

    private void barra_superiorMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_barra_superiorMouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        this.setLocation(x - mouseX, y - mouseY);
    }//GEN-LAST:event_barra_superiorMouseDragged

    private void barra_superiorMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_barra_superiorMousePressed
        mouseX = evt.getX();
        mouseY = evt.getY();
    }//GEN-LAST:event_barra_superiorMousePressed

    private void BT_FiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BT_FiltrarActionPerformed

    }//GEN-LAST:event_BT_FiltrarActionPerformed

    // <editor-fold defaultstate="collapsed" desc="Panel de Inicio">
    private void BT_FiltrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BT_FiltrarMouseClicked
        ActualizarTabla();
    }//GEN-LAST:event_BT_FiltrarMouseClicked

    private void CB_ServicioItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CB_ServicioItemStateChanged
        if ((String) CB_Servicio.getSelectedItem() != "-") {
            MostraDoctoresServcio();
        } else if ((String) CB_Servicio.getSelectedItem() == "-") {
            MostraDoctores();
        }
    }//GEN-LAST:event_CB_ServicioItemStateChanged

    private void CB_DoctorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CB_DoctorItemStateChanged
    }//GEN-LAST:event_CB_DoctorItemStateChanged

    private void BT_CambiarEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BT_CambiarEstadoActionPerformed
       
    }//GEN-LAST:event_BT_CambiarEstadoActionPerformed

    private void BT_CambiarEstadoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BT_CambiarEstadoMouseClicked
        int FilaSeleccionada = Tabla.getSelectedRow();
        if (FilaSeleccionada == -1) {
            new Warning("Debe seleccionar una fila").setVisible(true);
        } else {

            Object Telefono = Tabla.getValueAt(FilaSeleccionada, 7);

            String[] Opciones = {"En Espera", "Valida", "Cancelada"};

            // Mensaje para mostrar arriba del JComboBox
            String Mensaje = "Llame a este numero " + Telefono + " para confirmar la solicitud";

            // Crear el JOptionPane con el JComboBox y el mensaje
            JComboBox<String> ComboBox = new JComboBox<>(Opciones);
            JPanel Panel = new JPanel();
            Panel.add(new JLabel(Mensaje));
            Panel.add(ComboBox);

            int seleccion = JOptionPane.showOptionDialog(
                    null,
                    Panel,
                    "Cambiar Estado",
                    JOptionPane.DEFAULT_OPTION,
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    null,
                    null
            );

            Object UsuarioT;
            Object Doctor;
            Object Fecha;
            Object Hora;

            // Obtener la opci√≥n seleccionada del JComboBox
            if (seleccion >= 0 && seleccion < Opciones.length) {
                String OpcionSelecionada = (String) ComboBox.getSelectedItem();

                UsuarioT = Tabla.getValueAt(FilaSeleccionada, 0);
                Doctor = Tabla.getValueAt(FilaSeleccionada, 2);
                Fecha = Tabla.getValueAt(FilaSeleccionada, 3);
                Hora = Tabla.getValueAt(FilaSeleccionada, 4);

                try {
                    Connection conexion = null;
                    ConexionBD bd = new ConexionBD();
                    conexion = bd.getConexion();
                    Statement st = conexion.createStatement();

                    String SQL = "UPDATE Solicitudes SET Confirmada = ?, Estado_Cita = ? WHERE Usuario = ? AND Doctor = ? AND Fecha = ? AND Hora = ?";
                    PreparedStatement pstmt = conexion.prepareStatement(SQL);
                    pstmt.setString(1, "Si");
                    pstmt.setString(2, OpcionSelecionada);
                    pstmt.setString(3, String.valueOf(UsuarioT));
                    pstmt.setString(4, String.valueOf(Doctor));
                    pstmt.setString(5, String.valueOf(Fecha));
                    pstmt.setString(6, String.valueOf(Hora));

                    int filasActualizadas = pstmt.executeUpdate();

                    if (filasActualizadas > 0) {
                        new Success("Actualizacion exitosa").setVisible(true);
                        ActualizarTabla();
                    }

                    pstmt.close();
                    conexion.close();
                } catch (SQLException ex) {
                    
                }

            }

        }
    }//GEN-LAST:event_BT_CambiarEstadoMouseClicked

    // </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="Funciones del Panel de Inicio">
    public void LlenarTodosDatos(String Filtro, String Orden, String especialidad, String doctor) {
        try {
            Connection conexion = null;
            ConexionBD bd = new ConexionBD();
            conexion = bd.getConexion();

            String sql = "SELECT Usuario, Servicio, Doctor, Fecha, Hora, Confirmada, Estado_Cita, Telefono FROM Solicitudes";

            if (!Filtro.equals("Todas")) {
                sql += " WHERE Estado_Cita = ?";
            }

            if (!especialidad.isEmpty() && doctor.isEmpty()) {
                if (!Filtro.equals("Todas")) {
                    sql += " AND Servicio = ?";
                } else {
                    sql += " WHERE Servicio = ?";
                }
            } else if (especialidad.isEmpty() && !doctor.isEmpty()) {
                if (!Filtro.equals("Todas")) {
                    sql += " AND Doctor = ?";
                } else {
                    sql += " WHERE Doctor = ?";
                }
            } else if (!especialidad.isEmpty() && !doctor.isEmpty()) {
                if (!Filtro.equals("Todas")) {
                    sql += " AND Servicio = ? AND Doctor = ?";
                } else {
                    sql += " WHERE Servicio = ? AND Doctor = ?";
                }
            }

            if (!Orden.isEmpty()) {
                sql += " ORDER BY CDate(Fecha) " + Orden + ", Hora " + Orden;
            }

            PreparedStatement statement = conexion.prepareStatement(sql);

            int parametro = 1;
            if (!Filtro.equals("Todas")) {
                statement.setString(parametro, Filtro);
                parametro++;
            }

            if (!especialidad.isEmpty() && doctor.isEmpty()) {
                statement.setString(parametro, especialidad);
                parametro++;
            } else if (especialidad.isEmpty() && !doctor.isEmpty()) {
                statement.setString(parametro, doctor);
                parametro++;
            } else if (!especialidad.isEmpty() && !doctor.isEmpty()) {
                statement.setString(parametro, especialidad);
                parametro++;
                statement.setString(parametro, doctor);
                parametro++;
            }

            ResultSet resultado = statement.executeQuery();

            DefaultTableModel modeloTabla = (DefaultTableModel) Tabla.getModel();
            modeloTabla.setRowCount(0);

            while (resultado.next()) {
                String usuario = resultado.getString("Usuario");
                String servicio = resultado.getString("Servicio");
                String nombreDoctor = FormatoNombre(resultado.getString("Doctor"));
                String fecha = resultado.getString("Fecha");
                String hora = resultado.getString("Hora");
                String confirmada = resultado.getString("Confirmada");
                String estado = resultado.getString("Estado_Cita");
                String Telefono = String.valueOf((long) resultado.getDouble("Telefono"));
                Object[] fila = {usuario, servicio, nombreDoctor, fecha, hora, confirmada, estado, Telefono};
                modeloTabla.addRow(fila);
            }
        } catch (SQLException ex) {
            new Error("Error al cargar datos").setVisible(true);
        }
    }
    
    public void ActualizarTabla() {

        switch ((String) CB_EstadoCita.getSelectedItem()) {
            case "Todas":
                switch ((String) CB_Orden.getSelectedItem()) {
                    case "-":
                        if ("-".equals((String) CB_Servicio.getSelectedItem()) && "-".equals((String) CB_Doctor.getSelectedItem())) {
                            LlenarTodosDatos("Todas", "", "", "");
                        } else if (!"-".equals((String) CB_Servicio.getSelectedItem()) && "-".equals((String) CB_Doctor.getSelectedItem())) {

                            LlenarTodosDatos("Todas", "", (String) CB_Servicio.getSelectedItem(), "");

                        } else if ("-".equals((String) CB_Servicio.getSelectedItem()) && !"-".equals((String) CB_Doctor.getSelectedItem())) {

                            LlenarTodosDatos("Todas", "", "", (String) CB_Doctor.getSelectedItem());
                        } else if (!"-".equals((String) CB_Servicio.getSelectedItem()) && !"-".equals((String) CB_Doctor.getSelectedItem())) {

                            LlenarTodosDatos("Todas", "", (String) CB_Servicio.getSelectedItem(), (String) CB_Doctor.getSelectedItem());
                        }
                        break;
                    case "Ascendente":

                        if ("-".equals((String) CB_Servicio.getSelectedItem()) && "-".equals((String) CB_Doctor.getSelectedItem())) {
                            LlenarTodosDatos("Todas", "ASC", "", "");
                        } else if (!"-".equals((String) CB_Servicio.getSelectedItem()) && "-".equals((String) CB_Doctor.getSelectedItem())) {

                            LlenarTodosDatos("Todas", "ASC", (String) CB_Servicio.getSelectedItem(), "");

                        } else if ("-".equals((String) CB_Servicio.getSelectedItem()) && !"-".equals((String) CB_Doctor.getSelectedItem())) {

                            LlenarTodosDatos("Todas", "ASC", "", (String) CB_Doctor.getSelectedItem());
                        } else if (!"-".equals((String) CB_Servicio.getSelectedItem()) && !"-".equals((String) CB_Doctor.getSelectedItem())) {

                            LlenarTodosDatos("Todas", "ASC", (String) CB_Servicio.getSelectedItem(), (String) CB_Doctor.getSelectedItem());
                        }
                        break;
                    case "Descendente":

                        if ("-".equals((String) CB_Servicio.getSelectedItem()) && "-".equals((String) CB_Doctor.getSelectedItem())) {
                            LlenarTodosDatos("Todas", "DESC", "", "");
                        } else if (!"-".equals((String) CB_Servicio.getSelectedItem()) && "-".equals((String) CB_Doctor.getSelectedItem())) {

                            LlenarTodosDatos("Todas", "DESC", (String) CB_Servicio.getSelectedItem(), "");

                        } else if ("-".equals((String) CB_Servicio.getSelectedItem()) && !"-".equals((String) CB_Doctor.getSelectedItem())) {

                            LlenarTodosDatos("Todas", "DESC", "", (String) CB_Doctor.getSelectedItem());
                        } else if (!"-".equals((String) CB_Servicio.getSelectedItem()) && !"-".equals((String) CB_Doctor.getSelectedItem())) {

                            LlenarTodosDatos("Todas", "DESC", (String) CB_Servicio.getSelectedItem(), (String) CB_Doctor.getSelectedItem());
                        }
                        break;
                }
                break;
            case "En Espera":
                switch ((String) CB_Orden.getSelectedItem()) {
                    case "-":
                        if ("-".equals((String) CB_Servicio.getSelectedItem()) && "-".equals((String) CB_Doctor.getSelectedItem())) {
                            LlenarTodosDatos("En Espera", "", "", "");
                        } else if (!"-".equals((String) CB_Servicio.getSelectedItem()) && "-".equals((String) CB_Doctor.getSelectedItem())) {

                            LlenarTodosDatos("En Espera", "", (String) CB_Servicio.getSelectedItem(), "");

                        } else if ("-".equals((String) CB_Servicio.getSelectedItem()) && !"-".equals((String) CB_Doctor.getSelectedItem())) {

                            LlenarTodosDatos("En Espera", "", "", (String) CB_Doctor.getSelectedItem());
                        } else if (!"-".equals((String) CB_Servicio.getSelectedItem()) && !"-".equals((String) CB_Doctor.getSelectedItem())) {

                            LlenarTodosDatos("En Espera", "", (String) CB_Servicio.getSelectedItem(), (String) CB_Doctor.getSelectedItem());
                        }
                        break;
                    case "Ascendente":

                        if ("-".equals((String) CB_Servicio.getSelectedItem()) && "-".equals((String) CB_Doctor.getSelectedItem())) {
                            LlenarTodosDatos("En Espera", "ASC", "", "");
                        } else if (!"-".equals((String) CB_Servicio.getSelectedItem()) && "-".equals((String) CB_Doctor.getSelectedItem())) {

                            LlenarTodosDatos("En Espera", "ASC", (String) CB_Servicio.getSelectedItem(), "");

                        } else if ("-".equals((String) CB_Servicio.getSelectedItem()) && !"-".equals((String) CB_Doctor.getSelectedItem())) {

                            LlenarTodosDatos("En Espera", "ASC", "", (String) CB_Doctor.getSelectedItem());
                        } else if (!"-".equals((String) CB_Servicio.getSelectedItem()) && !"-".equals((String) CB_Doctor.getSelectedItem())) {

                            LlenarTodosDatos("En Espera", "ASC", (String) CB_Servicio.getSelectedItem(), (String) CB_Doctor.getSelectedItem());
                        }
                        break;
                    case "Descendente":

                        if ("-".equals((String) CB_Servicio.getSelectedItem()) && "-".equals((String) CB_Doctor.getSelectedItem())) {
                            LlenarTodosDatos("En Espera", "DESC", "", "");
                        } else if (!"-".equals((String) CB_Servicio.getSelectedItem()) && "-".equals((String) CB_Doctor.getSelectedItem())) {

                            LlenarTodosDatos("En Espera", "DESC", (String) CB_Servicio.getSelectedItem(), "");

                        } else if ("-".equals((String) CB_Servicio.getSelectedItem()) && !"-".equals((String) CB_Doctor.getSelectedItem())) {

                            LlenarTodosDatos("En Espera", "DESC", "", (String) CB_Doctor.getSelectedItem());
                        } else if (!"-".equals((String) CB_Servicio.getSelectedItem()) && !"-".equals((String) CB_Doctor.getSelectedItem())) {

                            LlenarTodosDatos("En Espera", "DESC", (String) CB_Servicio.getSelectedItem(), (String) CB_Doctor.getSelectedItem());
                        }
                        break;
                }
                break;
            case "Valida":
                switch ((String) CB_Orden.getSelectedItem()) {
                    case "-":
                        if ("-".equals((String) CB_Servicio.getSelectedItem()) && "-".equals((String) CB_Doctor.getSelectedItem())) {
                            LlenarTodosDatos("Valida", "", "", "");
                        } else if (!"-".equals((String) CB_Servicio.getSelectedItem()) && "-".equals((String) CB_Doctor.getSelectedItem())) {

                            LlenarTodosDatos("Valida", "", (String) CB_Servicio.getSelectedItem(), "");

                        } else if ("-".equals((String) CB_Servicio.getSelectedItem()) && !"-".equals((String) CB_Doctor.getSelectedItem())) {

                            LlenarTodosDatos("Valida", "", "", (String) CB_Doctor.getSelectedItem());
                        } else if (!"-".equals((String) CB_Servicio.getSelectedItem()) && !"-".equals((String) CB_Doctor.getSelectedItem())) {

                            LlenarTodosDatos("Valida", "", (String) CB_Servicio.getSelectedItem(), (String) CB_Doctor.getSelectedItem());
                        }
                        break;
                    case "Ascendente":

                        if ("-".equals((String) CB_Servicio.getSelectedItem()) && "-".equals((String) CB_Doctor.getSelectedItem())) {
                            LlenarTodosDatos("Valida", "ASC", "", "");
                        } else if (!"-".equals((String) CB_Servicio.getSelectedItem()) && "-".equals((String) CB_Doctor.getSelectedItem())) {

                            LlenarTodosDatos("Valida", "ASC", (String) CB_Servicio.getSelectedItem(), "");

                        } else if ("-".equals((String) CB_Servicio.getSelectedItem()) && !"-".equals((String) CB_Doctor.getSelectedItem())) {

                            LlenarTodosDatos("Valida", "ASC", "", (String) CB_Doctor.getSelectedItem());
                        } else if (!"-".equals((String) CB_Servicio.getSelectedItem()) && !"-".equals((String) CB_Doctor.getSelectedItem())) {

                            LlenarTodosDatos("Valida", "ASC", (String) CB_Servicio.getSelectedItem(), (String) CB_Doctor.getSelectedItem());
                        }
                        break;
                    case "Descendente":

                        if ("-".equals((String) CB_Servicio.getSelectedItem()) && "-".equals((String) CB_Doctor.getSelectedItem())) {
                            LlenarTodosDatos("Valida", "DESC", "", "");
                        } else if (!"-".equals((String) CB_Servicio.getSelectedItem()) && "-".equals((String) CB_Doctor.getSelectedItem())) {

                            LlenarTodosDatos("Valida", "DESC", (String) CB_Servicio.getSelectedItem(), "");

                        } else if ("-".equals((String) CB_Servicio.getSelectedItem()) && !"-".equals((String) CB_Doctor.getSelectedItem())) {

                            LlenarTodosDatos("Valida", "DESC", "", (String) CB_Doctor.getSelectedItem());
                        } else if (!"-".equals((String) CB_Servicio.getSelectedItem()) && !"-".equals((String) CB_Doctor.getSelectedItem())) {

                            LlenarTodosDatos("Valida", "DESC", (String) CB_Servicio.getSelectedItem(), (String) CB_Doctor.getSelectedItem());
                        }
                        break;
                }
                break;
            case "Cancelada":
                switch ((String) CB_Orden.getSelectedItem()) {
                    case "-":
                        if (CB_Servicio.getSelectedItem().equals("-") && CB_Doctor.getSelectedItem().equals("-")) {
                            LlenarTodosDatos("Cancelada", "", "", "");
                        } else if (!CB_Servicio.getSelectedItem().equals("-") && CB_Doctor.getSelectedItem().equals("-")) {
                            LlenarTodosDatos("Cancelada", "", (String) CB_Servicio.getSelectedItem(), "");
                        } else if (CB_Servicio.getSelectedItem().equals("-") && !CB_Doctor.getSelectedItem().equals("-")) {
                            LlenarTodosDatos("Cancelada", "", "", (String) CB_Doctor.getSelectedItem());
                        } else if (!CB_Servicio.getSelectedItem().equals("-") && !CB_Doctor.getSelectedItem().equals("-")) {
                            LlenarTodosDatos("Cancelada", "", (String) CB_Servicio.getSelectedItem(), (String) CB_Doctor.getSelectedItem());
                        }
                        break;
                    case "Ascendente":
                        if (CB_Servicio.getSelectedItem().equals("-") && CB_Doctor.getSelectedItem().equals("-")) {
                            LlenarTodosDatos("Cancelada", "ASC", "", "");
                        } else if (!CB_Servicio.getSelectedItem().equals("-") && CB_Doctor.getSelectedItem().equals("-")) {
                            LlenarTodosDatos("Cancelada", "ASC", (String) CB_Servicio.getSelectedItem(), "");
                        } else if (CB_Servicio.getSelectedItem().equals("-") && !CB_Doctor.getSelectedItem().equals("-")) {
                            LlenarTodosDatos("Cancelada", "ASC", "", (String) CB_Doctor.getSelectedItem());
                        } else if (!CB_Servicio.getSelectedItem().equals("-") && !CB_Doctor.getSelectedItem().equals("-")) {
                            LlenarTodosDatos("Cancelada", "ASC", (String) CB_Servicio.getSelectedItem(), (String) CB_Doctor.getSelectedItem());
                        }
                        break;
                    case "Descendente":
                        if (CB_Servicio.getSelectedItem().equals("-") && CB_Doctor.getSelectedItem().equals("-")) {
                            LlenarTodosDatos("Cancelada", "DESC", "", "");
                        } else if (!CB_Servicio.getSelectedItem().equals("-") && CB_Doctor.getSelectedItem().equals("-")) {
                            LlenarTodosDatos("Cancelada", "DESC", (String) CB_Servicio.getSelectedItem(), "");
                        } else if (CB_Servicio.getSelectedItem().equals("-") && !CB_Doctor.getSelectedItem().equals("-")) {
                            LlenarTodosDatos("Cancelada", "DESC", "", (String) CB_Doctor.getSelectedItem());
                        } else if (!CB_Servicio.getSelectedItem().equals("-") && !CB_Doctor.getSelectedItem().equals("-")) {
                            LlenarTodosDatos("Cancelada", "DESC", (String) CB_Servicio.getSelectedItem(), (String) CB_Doctor.getSelectedItem());
                        }
                        break;
                }
        }

    }

    public void MostraDoctores() {
        try {

            Connection Conexion = null;
            ConexionBD BD = new ConexionBD();
            Conexion = BD.getConexion();
            Statement st = Conexion.createStatement();

            String SQL = "SELECT DISTINCT Doctor FROM Solicitudes";

            //Seleciona los nombre de los doctores segun la especialidad selecionada
            //Guarda en rs los resultados de la busqueda SQL, osea las diferentes especialidades
            ResultSet rs = st.executeQuery(SQL);
            CB_Doctor.removeAllItems();
            CB_Doctor.addItem("-");
            //Mientras que en los resultados de rs exista mas resultados
            while (rs.next()) {
                //Obtengo el valor de la columna Nombre_Apellido y La agrego en el ComboBox de Doctores
                CB_Doctor.addItem(rs.getString("Doctor"));

            }

        } catch (SQLException ex) {

        }
    }

    public void MostraDoctoresServcio() {
        try {

            Connection Conexion = null;
            ConexionBD BD = new ConexionBD();
            Conexion = BD.getConexion();
            Statement st = Conexion.createStatement();

            String SQL = "SELECT Doctor FROM Solicitudes WHERE Especialidad = '" + (String) CB_Servicio.getSelectedItem() + "'";

            //Seleciona los nombre de los doctores segun la especialidad selecionada
            //Guarda en rs los resultados de la busqueda SQL, osea las diferentes especialidades
            ResultSet rs = st.executeQuery(SQL);
            CB_Doctor.removeAllItems();
            CB_Doctor.addItem("-");
            //Mientras que en los resultados de rs exista mas resultados
            while (rs.next()) {
                //Obtengo el valor de la columna Nombre_Apellido y La agrego en el ComboBox de Doctores
                CB_Doctor.addItem(rs.getString("Doctor"));

            }

        } catch (SQLException ex) {

        }
    }

    public void MostrarServicios() {
        try {

            Connection Conexion = null;
            ConexionBD BD = new ConexionBD();
            Conexion = BD.getConexion();
            Statement st = Conexion.createStatement();

            String SQL = "SELECT DISTINCT Servicio FROM Solicitudes";

            ResultSet rs = st.executeQuery(SQL);

            while (rs.next()) {

                CB_Servicio.addItem(rs.getString("Servicio"));

            }

        } catch (SQLException ex) {

        }
    }

    // </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="Funciones Generales">
    public Boolean Tama√±oMinimo(JTextField JTextField, String Campo, int min) {
        //Si no tiene el tama√±o minimo de caracteres, muestra error
        if (JTextField.getText().length() < min) {
            new Warning("Tama√±o minimo de " + Campo + ":" + min).setVisible(true);
            return false;
        } else {
            return true;
        }
    }

    public Boolean Tama√±oTelefono(JTextField JTextField) {
        //Si no tiene el tama√±o minimo de caracteres, muestra error
        if (JTextField.getText().length() != 7 && JTextField.getText().length() != 10) {
            new Warning("Tama√±o minimo telefono: 7-10 n√∫meros").setVisible(true);
            return false;
        } else {
            return true;
        }
    }

    // </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="Funciones del Panel de Datos">
    //Funci√≥n para eliminar al jefe actual del hospital y cambiar sus datos
    public void eliminar_act() {
        try {
            Connection Conexion = null;
            ConexionBD BD = new ConexionBD();
            Conexion = BD.getConexion();
            Statement st = Conexion.createStatement();
            //Eliminaci√≥n de la tabla de Pacientes
            String sql = "DELETE FROM Admin";
            PreparedStatement stmt = Conexion.prepareStatement("DELETE FROM Admin WHERE Usuario = ?");
            stmt.setString(1, user[4]);
            stmt.executeUpdate();
            //Eliminaci√≥n de la tabla de usuario
            //Inicialmente se elimina el registro de la tabla de usuarios
            String sq2 = "DELETE FROM Usuarios";
            PreparedStatement stmt2 = Conexion.prepareStatement("DELETE FROM Usuarios WHERE Usuario = ?");
            stmt2.setString(1, user[4]);
            stmt2.executeUpdate();

        } catch (SQLException e) {
            new Error("Error al actualizar Datos").setVisible(true);
        }
    }

    //Funci√≥n que extrae los datos de la base de datos de pacientey los almacena en un vector para mostrarlo en la ventana de actualiaci√≥n
    String user[] = new String[7];

    public String[] extraer() {
        try {

            String user_;

            Connection Conexion = null;
            ConexionBD BD = new ConexionBD();
            Conexion = BD.getConexion();
            Statement st = Conexion.createStatement();

            String SQL = "Select * from Admin";
            Statement sentence = Conexion.createStatement();
            ResultSet rst = sentence.executeQuery(SQL);
            while (rst.next()) {

                user_ = rst.getString("Usuario");

                if (user_.equals((Login.Usuario))) {
                    user[0] = FormatoNombre(rst.getString("Nombre_Apellido"));
                    user[1] = String.valueOf((long) rst.getDouble("Telefono"));
                    user[2] = String.valueOf((int) rst.getDouble("Edad"));
                    user[3] = String.valueOf((long) rst.getDouble("Numero_Documento"));
                    user[4] = rst.getString("Usuario");
                    user[5] = rst.getString("Contrase√±a");
                    user[6] = rst.getString("Genero");
                }

            }
        } catch (SQLException | HeadlessException e) {
            new Error("Error al buscar Datos").setVisible(true);

        }
        return user;
    }

    //Para poner una cadena en formato de un nombre 
    public static String FormatoNombre(String Cadena) {
        if (Cadena == null || Cadena.isEmpty()) {
            return Cadena;
        }

        StringBuilder sb = new StringBuilder(Cadena.length());
        boolean capitalizeNext = true;
        for (char c : Cadena.toCharArray()) {
            if (Character.isWhitespace(c)) {
                capitalizeNext = true;
            } else if (capitalizeNext) {
                sb.append(Character.toUpperCase(c));
                capitalizeNext = false;
            } else {
                sb.append(Character.toLowerCase(c));
            }
        }

        return sb.toString();
    }

    //Funci√≥n para validar que ninguno de los datos a actualizar le pertenexcan a otro usuario en el hospital  
    public Boolean Existencia() {

        try {
            Connection Conexion = null;
            ConexionBD BD = new ConexionBD();
            Conexion = BD.getConexion();
            Statement st = Conexion.createStatement();

            //Para buscar si existe el usuario a crear
            String SQL1 = "SELECT * FROM Admin WHERE Usuario = ?";
            String SQL2 = "SELECT * FROM Doctores WHERE Usuario = ?";
            String SQL3 = "SELECT * FROM OtroEmpleado WHERE Usuario = ?";
            String SQL4 = "SELECT * FROM Admin WHERE Numero_Documento = ?";
            String SQL5 = "SELECT * FROM Doctores WHERE Numero_Documento = ?";
            String SQL6 = "SELECT * FROM OtroEmpleado WHERE Numero_Documento = ?";
            String SQL7 = "SELECT * FROM Admin WHERE Telefono = ?";
            String SQL8 = "SELECT * FROM Doctores WHERE Telefono = ?";
            String SQL9 = "SELECT * FROM OtroEmpleado WHERE Telefono = ?";

            PreparedStatement pst1 = Conexion.prepareStatement(SQL1);
            PreparedStatement pst2 = Conexion.prepareStatement(SQL2);
            PreparedStatement pst3 = Conexion.prepareStatement(SQL3);
            PreparedStatement pst4 = Conexion.prepareStatement(SQL4);
            PreparedStatement pst5 = Conexion.prepareStatement(SQL5);
            PreparedStatement pst6 = Conexion.prepareStatement(SQL6);
            PreparedStatement pst7 = Conexion.prepareStatement(SQL7);
            PreparedStatement pst8 = Conexion.prepareStatement(SQL8);
            PreparedStatement pst9 = Conexion.prepareStatement(SQL9);

            pst1.setString(1, update_user.getText());
            pst2.setString(1, update_user.getText());
            pst3.setString(1, update_user.getText());
            pst4.setString(1, update_id.getText());
            pst5.setString(1, update_id.getText());
            pst6.setString(1, update_id.getText());
            pst7.setString(1, Update_phone.getText());
            pst8.setString(1, Update_phone.getText());
            pst9.setString(1, Update_phone.getText());
            //Extrae el conjunto de resultados 
            ResultSet rs1 = pst1.executeQuery();
            ResultSet rs2 = pst2.executeQuery();
            ResultSet rs3 = pst3.executeQuery();
            ResultSet rs4 = pst4.executeQuery();
            ResultSet rs5 = pst5.executeQuery();
            ResultSet rs6 = pst6.executeQuery();
            ResultSet rs7 = pst7.executeQuery();
            ResultSet rs8 = pst8.executeQuery();
            ResultSet rs9 = pst9.executeQuery();

            //Si hay mas de un resultado: true
            if (rs1.next() || rs2.next() || rs3.next() || rs4.next() || rs5.next() || rs6.next() || rs7.next() || rs8.next() || rs9.next()) {
                return true;
            } else {
                return false;
            }
        } catch (SQLException | HeadlessException e) {
            return false;
        }

    }

    public void ActualizarBD() {

        try {
            
            Connection Conexion = null;
            ConexionBD BD = new ConexionBD();
            Conexion = BD.getConexion();
            Statement st = Conexion.createStatement();
            String SQL = "insert into Admin(Nombre_Apellido, Telefono, Genero,"
                    + "Edad, Numero_Documento, Usuario, Contrase√±a, Estado, Fecha_Registro) values (?,?,?,?,?,?,?,?,?)";
            PreparedStatement pst = Conexion.prepareStatement(SQL);

            String Genero = null;
            if ("F".equals(sx)) {
                Genero = "Femenino";
            }
            if ("M".equals(sx)) {
                Genero = "Masculino";
            }

            Date fecha = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            String fechaComoString = sdf.format(fecha);
            String state = "Activo";

            
            Clases.Administrador A = new Clases.Administrador(Update_name.getText(), Genero, Double.parseDouble(update_id.getText()), Double.parseDouble(update_age.getText()), Double.parseDouble(Update_phone.getText()), fechaComoString, state, update_user.getText(), Update_password.getText());
            pst.setString(1, A.getNombre_Apellido());
            pst.setDouble(2, A.getNo_Telefono());
            pst.setString(3, A.getGenero());
            pst.setDouble(4, A.getEdad());
            pst.setDouble(5, A.getNo_Documento());
            pst.setString(6, A.getusuario());
            pst.setString(7, A.getcontrase√±a());
            pst.setString(8, A.getestado());
            pst.setString(9, A.getfecharegistro());

            int n = pst.executeUpdate(); //Para guardar los datos

            SQL = "insert into Usuarios(Usuario, Contrase√±a, Tipo) values(?,?,?)";

            //Se utiliza para poder ejecutar una instruccion SQL y para ejecutar esta instrucci√≥n m√∫ltiples veces
            pst = Conexion.prepareStatement(SQL);

            pst.setString(1, A.getusuario());
            pst.setString(2, A.getcontrase√±a());
            pst.setString(3, "Administrador");
            int n1 = pst.executeUpdate(); //Para guardar los datos

            //Si es mayor que 0 quiere decir que se se inserto bien en la BD
            if (n > 0 && n1 > 0) {
                //Mensaje de confirmacion
                new Success("Datos actualizados").setVisible(true);

            }

        } catch (SQLException | HeadlessException e) {
            //Error x si acaso
            new Error("Error al actualizar datos").setVisible(true);

        }
    }
    // </editor-fold>

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Administrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Administrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Administrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Administrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Administrador().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private Componentes.AllButton BT_Actualizar;
    private Componentes.AllButton BT_CambiarEstado;
    private Componentes.AllButton BT_CerrarSesion;
    private Componentes.AllButton BT_Datos;
    private Componentes.AllButton BT_Filtrar;
    private Componentes.AllButton BT_Home;
    private Componentes.AllButton BT_Menu;
    private Componentes.BlurBackground Background;
    private Componentes.ComboBoxSuggestion CB_Doctor;
    private Componentes.ComboBoxSuggestion CB_EstadoCita;
    private Componentes.ComboBoxSuggestion CB_Orden;
    private Componentes.ComboBoxSuggestion CB_Servicio;
    private javax.swing.JPanel CardLayout;
    private org.example.Custom.PanelRound ConfirmarContr1;
    private org.example.Custom.PanelRound Contrase√±a1;
    private javax.swing.JPanel Datos;
    private org.example.Custom.PanelRound Edad1;
    private javax.swing.JPanel Inicio;
    private org.example.Custom.PanelRound JP_BarraLateral;
    private javax.swing.JPanel JP_CerraSesionBarraL;
    private org.example.Custom.PanelRound NoDocumento1;
    private org.example.Custom.PanelRound NombreApellido1;
    private Componentes.Table Tabla;
    private org.example.Custom.PanelRound Telefono1;
    private org.example.Custom.AnimatedTextField Update_name;
    private org.example.Custom.AnimatedPasswordField Update_password;
    private org.example.Custom.AnimatedTextField Update_phone;
    private org.example.Custom.PanelRound Usuario1;
    private javax.swing.JPanel barra_superior;
    private javax.swing.JPanel barra_superior1;
    private Componentes.BlurBackground blurBackground11;
    private Componentes.BlurBackground blurBackground12;
    private Componentes.BlurBackground blurBackground3;
    private Componentes.BlurBackground blurBackground8;
    private javax.swing.ButtonGroup botones;
    private Componentes.AllButton bt_cerrar;
    private Componentes.AllButton bt_cerrar1;
    private javax.swing.JLabel bt_f1;
    private javax.swing.JLabel bt_m1;
    private Componentes.AllButton bt_minimizar;
    private Componentes.AllButton bt_minimizar1;
    private javax.swing.JLabel esconder;
    private javax.swing.JLabel esconder1;
    private javax.swing.JLabel icon_ad;
    private Componentes.BlurBackground icon_do;
    private javax.swing.JLabel icon_em;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label_completadas;
    private javax.swing.JLabel label_pendiente;
    private javax.swing.JLabel label_total;
    private javax.swing.JLabel lb_Estado;
    private javax.swing.JLabel lb_doctor;
    private javax.swing.JLabel nu_ad;
    private javax.swing.JLabel nu_do;
    private javax.swing.JLabel nu_em;
    private org.example.Custom.PanelRound panelRound1;
    private org.example.Custom.PanelRound panelRound2;
    private org.example.Custom.PanelRound panelRound3;
    private org.example.Custom.PanelRound panelRound4;
    private org.example.Custom.AnimatedTextField update_age;
    private org.example.Custom.AnimatedPasswordField update_confirm;
    private org.example.Custom.AnimatedTextField update_id;
    private org.example.Custom.AnimatedTextField update_user;
    private javax.swing.JLabel ver;
    private javax.swing.JLabel ver1;
    // End of variables declaration//GEN-END:variables
}
